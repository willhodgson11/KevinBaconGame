Index: src/GraphLib.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\r\n\r\n/**\r\n * Library for graph analysis\r\n * \r\n * @author Chris Bailey-Kellogg, Dartmouth CS 10, Fall 2016\r\n * @author Tim Pierson, Dartmouth CS 10, Spring 2019 - provided basis BFS method\r\n * @author willhodgson Dartmouth CS 10, Winter 2023. Added bfs, getPath, missingVertices,\r\n * AverageSeparation, totalSeparatioh and verticesByInDegree methods\r\n * \r\n */\r\npublic class GraphLib {\r\n\r\n\t/**\r\n\t * BFS to find shortest path tree for a current center of the universe. Return a path tree as a Graph.\r\n\t * Based on BFS method from GraphTraversal.java code from class.\r\n\t * @param g\r\n\t * @param source\r\n\t * @return graph of vertices (all with outDegree 1) connecting a given vertex to the center of universe\r\n\t * @param <V>\r\n\t * @param <E>\r\n\t */\r\n\tpublic static <V,E> Graph<V,E> bfs(Graph<V,E> g, V source) {\r\n\t\tGraph backTrack = new AdjacencyMapGraph<V, V>(); //initialize backTrack\r\n\t\tbackTrack.insertVertex(source); //load start vertex\r\n\t\tSet<V> visited = new HashSet<V>(); //Set to track which vertices have already been visited\r\n\t\tQueue<V> queue = new LinkedList<V>(); //queue to implement BFS\r\n\r\n\t\tqueue.add(source); //enqueue start vertex\r\n\t\tvisited.add(source); //add start to visited Set\r\n\t\twhile (!queue.isEmpty()) { //loop until no more vertices\r\n\t\t\tV u = queue.remove(); //dequeue\r\n\t\t\tfor (V v : g.outNeighbors(u)) { //loop over out neighbors\r\n\t\t\t\tif (!visited.contains(v)) { //if neighbor not visited, then neighbor is discovered from this vertex\r\n\t\t\t\t\tvisited.add(v); //add neighbor to visited Set\r\n\t\t\t\t\tqueue.add(v); //enqueue neighbor\r\n\t\t\t\t\tbackTrack.insertVertex(v); //add neighbor to graph\r\n\t\t\t\t\tbackTrack.insertDirected(v, u, g.getLabel(v, u)); //save that this vertex was discovered from prior vertex\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn backTrack;\r\n\t}\r\n\r\n\t/**\r\n\t * Given a shortest path tree and a vertex, construct a path from the vertex back to the center of the universe.\r\n\t * Assumes all vertices in shortestPathTree have only one neighbor.\r\n\t * @param tree\r\n\t * @param v\r\n\t * @return list of vertices that connect given vertex to center of universe\r\n\t * @param <V>\r\n\t * @param <E>\r\n\t */\r\n\tpublic static <V,E> List<V> getPath(Graph<V,E> tree, V v) {\r\n\t\tif(!tree.hasVertex(v)){return null;}\r\n\t\tList<V> path = new ArrayList<>();\t// initialize new list of vertices\r\n\t\tpath.add(v);\t\t\t\t\t\t// add given vertex to list\r\n\t\t// while the current vertex has a neighbor to visit, create an iterator for the neighbors of the current vertex\r\n\t\tfor (Iterator<V> neighbor = tree.outNeighbors(v).iterator(); neighbor.hasNext(); ) {\r\n\t\t\tv = neighbor.next();\t//\r\n\t\t\tpath.add(v);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Given a graph and a subgraph (here shortest path tree), determine which vertices\r\n\t * are in the graph but not the subgraph (here, not reached by BFS).\r\n\t * @param graph\r\n\t * @param subgraph\r\n\t * @return set of vertices not included in shortestPath tree\r\n\t * @param <V>\r\n\t * @param <E>\r\n\t */\r\n\tpublic static <V,E> Set<V> missingVertices(Graph<V,E> graph, Graph<V,E> subgraph){\r\n\t\tSet<V> missing = new HashSet<>();\r\n\t\tfor(V v : graph.vertices()){\r\n\t\t\tif(!subgraph.hasVertex(v)){\r\n\t\t\t\tmissing.add(v);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn missing;\r\n\t}\r\n\r\n\t/**\r\n\t * Find the average distance-from-root in a shortest path tree, without enumerating all the paths!\r\n\t * @param tree\r\n\t * @param root\r\n\t * @return average degree of separation\r\n\t * @param <V>\r\n\t * @param <E>\r\n\t */\r\n\tpublic static <V,E> double averageSeparation(Graph<V,E> tree, V root){\r\n\t\t// call recursive function with an initial separation of zero (root is the same as itself)\r\n\t\tint total = totalSeparation(tree, root, 0);\r\n\t\t// define denominator as the total number of elements in the tree\r\n\t\tint numEle = tree.numVertices();\r\n\t\t// return total degree of separation over number of elements in tree, excluding the root\r\n\t\treturn (double) total/ (double) numEle - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Recursive function to determine total degree of separation within tree\r\n\t * @param tree\r\n\t * @param node\r\n\t * @param degree\r\n\t * @return total degree of separation of all vertices from root, as int\r\n\t * @param <V>\r\n\t * @param <E>\r\n\t */\r\n\tprivate static <V,E> int totalSeparation(Graph<V, E> tree, V node, int degree){\r\n\t\tint sum = degree;\t// initialize sum to current degree of separation\r\n\t\tList<V> visited = new ArrayList<>();\r\n\t\tvisited.add(node);\r\n\t\tfor (V v : tree.outNeighbors(node)){\t// for each neighbor, add their degree of separation to sum\r\n\t\t\tsum += totalSeparation(tree, v, degree+1);\t// recursively call totalSeparation, incrementing the degree of separation by one\r\n\t\t}\r\n\t\treturn sum;\r\n\t}\r\n\r\n\t/**\r\n\t * from SA5(?)\r\n\t * Orders vertices in decreasing order by their in-degree\r\n\t * @param g\t\tgraph\r\n\t * @return\t\tlist of vertices sorted by in-degree, decreasing (i.e., largest at index 0)\r\n\t */\r\n\tpublic static <V,E> List<V> verticesByInDegree(Graph<V,E> g) {\r\n\t\tArrayList<V> vertices = new ArrayList<>();\r\n\r\n\t\t// Adds vertices in set to a list\r\n\t\tfor(V vertex : g.vertices()){\r\n\t\t\tvertices.add(vertex);\r\n\t\t}\r\n\r\n\t\t// Sort list in descending order of inDegree\r\n\t\tvertices.sort((V v1, V v2)-> g.inDegree(v2) - g.inDegree(v1));\r\n\r\n\t\treturn vertices;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GraphLib.java b/src/GraphLib.java
--- a/src/GraphLib.java	(revision 0572f7eb0f7918ef43cc9e5e9763c518194bdec8)
+++ b/src/GraphLib.java	(date 1676854476658)
@@ -96,7 +96,7 @@
 		// define denominator as the total number of elements in the tree
 		int numEle = tree.numVertices();
 		// return total degree of separation over number of elements in tree, excluding the root
-		return (double) total/ (double) numEle - 1;
+		return (double) total/ ((double) numEle - 1);
 	}
 
 	/**
Index: src/KevinBacon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class KevinBacon {\r\n    private AdjacencyMapGraph<String, Set<String>> graph;\r\n    private  String centerUniverse = \"Kevin Bacon\";\r\n    private  Graph<String, Set<String>> tree;\r\n\r\n\r\n    public KevinBacon(String actorsFile, String moviesFile, String movieActorFile) throws IOException {\r\n        GraphBuilder graphy = new GraphBuilder(actorsFile, moviesFile, movieActorFile);\r\n        this.graph = graphy.buildGraph();\r\n        welcome();\r\n    }\r\n\r\n    public void infSeparation(String actor){\r\n        GraphLib.missingVertices(graph, tree);\r\n    }\r\n\r\n    public void newCenter(String name){\r\n        if(!graph.hasVertex(name)) {\r\n            System.out.println(\"Please enter a valid actor\");\r\n            return;\r\n        }\r\n        this.centerUniverse = name;\r\n        this.tree = GraphLib.bfs(graph, name);\r\n        int total = graph.numVertices();\r\n        int missing = GraphLib.missingVertices(graph,  tree).size();\r\n        int unconnected = total - missing;\r\n        System.out.println(name + \" is now the center of the acting universe, connected to \"+ unconnected +\r\n                        \"/\" + total + \" actors with average separation \" + GraphLib.averageSeparation(tree, name));\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * prints the list of actors—and the movies they costarred in—that connect the\r\n     * provided actor and the center of the universe\r\n     * @param name name of the selected actor\r\n     */\r\n    public void findPath(String name){\r\n        // Name must be a known vertex in the whole graph\r\n        if(!graph.hasVertex(name)){\r\n            System.out.println(\"Please enter a valid actor\");\r\n            return;\r\n        }\r\n        // If there is no path between the provided actor and the center of the universe, they are not connected\r\n        List<String> pathList = GraphLib.getPath(tree, name);\r\n        if(pathList == null){\r\n            System.out.println(centerUniverse + \" and \" + name + \" are not connected\");\r\n        }\r\n        // Print the degree of separation of the provided actor\r\n        System.out.println(name + \"'s number is \" + (pathList.size()-1));\r\n        // Print the names of actors connecting the provided actor and the center of the universe, and the films that connect them\r\n        for(int i=0; i<pathList.size()-1; i++){\r\n            // Get the name of the current actor being examined\r\n            String curr = pathList.get(i);\r\n            // Get the name of the next connecting actor\r\n            String next = pathList.get(i+1);\r\n            // Get the list of movies that both actors starred in together\r\n            Set<String> movies = graph.getLabel(curr, next);\r\n            System.out.println(curr + \" appeared in \" + movies + \" with \" + next);\r\n        }\r\n    }\r\n    public void bestCenters(int n) {\r\n        Map<Double, String> averages = new TreeMap<>();\r\n        for(String actor: graph.vertices()) {\r\n            Double avg = GraphLib.averageSeparation(tree, actor);\r\n            averages.put(avg, actor);\r\n        }\r\n        Map<Double, String> sortedAverages = new TreeMap<>(averages);\r\n        System.out.println(sortedAverages);\r\n    }\r\n    public void sortDegree(int low, int high) {\r\n\r\n    }\r\n    public void sortSeparation(int low, int high) {\r\n\r\n    }\r\n\r\n    public void welcome() {\r\n        System.out.println(\"Commands:\\n\" +\r\n                \"c <#>: list top (positive number) or bottom (negative) <#> centers of the universe, sorted by average separation\\n\" +\r\n                \"d <low> <high>: list actors sorted by degree, with degree between low and high\\n\" +\r\n                \"i: list actors with infinite separation from the current center\\n\" +\r\n                \"p <name>: find path from <name> to current center of the universe\\n\" +\r\n                \"s <low> <high>: list actors sorted by non-infinite separation from the current center, with separation between low and high\\n\" +\r\n                \"u <name>: make <name> the center of the universe\\n\" +\r\n                \"q: quit game\\n\" +\r\n                \"\\n\" );\r\n        newCenter(centerUniverse);\r\n        getUserInput();\r\n    }\r\n    public void getUserInput() {\r\n        Scanner input = new Scanner(System.in);\r\n        String func;\r\n        System.out.println(centerUniverse + \"game > \\n\");\r\n        String[] temp = input.nextLine().split(\"\\\\ \");\r\n        func = temp[0];\r\n        switch (func) {\r\n            case \"c\" -> {\r\n                try {\r\n                    int n = Integer.parseInt(temp[1]);\r\n                    bestCenters(n);\r\n                } catch (NumberFormatException nfe) {\r\n                    System.out.println(\"Invalid number. Try again\\n\");\r\n                    getUserInput();\r\n                }\r\n            }\r\n            case \"d\" -> {\r\n                if (temp.length == 3) {\r\n                    try {\r\n                        int low = Integer.parseInt(temp[1]);\r\n                        int high = Integer.parseInt(temp[2]);\r\n                        sortDegree(low, high);\r\n                    } catch (NumberFormatException nfe) {\r\n                        System.out.println(\"Invalid entry. Try again\\n\");\r\n                        getUserInput();\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Wrong number of inputs. Try again\");\r\n                    getUserInput();\r\n                }\r\n            }\r\n            case \"i\" -> infSeparation(centerUniverse);\r\n            case \"p\" -> {\r\n                if (temp.length == 3) {\r\n                    String name = temp[1] + temp[2];\r\n                    findPath(name);\r\n                } else {\r\n                    System.out.println(\"Wrong number of inputs. Try again\");\r\n                    getUserInput();\r\n                }\r\n            }\r\n            case \"s\" -> {\r\n                if (temp.length == 3) {\r\n                    try {\r\n                        int low = Integer.parseInt(temp[1]);\r\n                        int high = Integer.parseInt(temp[2]);\r\n                        sortSeparation(low, high);\r\n                    } catch (NumberFormatException nfe) {\r\n                        System.out.println(\"Invalid entry. Try again\\n\");\r\n                        getUserInput();\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Wrong number of inputs. Try again\");\r\n                    getUserInput();\r\n                }\r\n            }\r\n            case \"u\" -> {\r\n                if (temp.length == 3) {\r\n                    String name = temp[1] + temp[2];\r\n                    newCenter(name);\r\n                } else {\r\n                    System.out.println(\"Wrong number of inputs. Try again\");\r\n                    getUserInput();\r\n                }\r\n            }\r\n            case \"q\" -> System.exit(0);\r\n            default -> {\r\n                System.out.println(\"Invalid entry. Try again\\n\");\r\n                getUserInput();\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        KevinBacon test0 = new KevinBacon(\"actorsTest.txt\", \"moviesTest.txt\", \"movie-actorsTest.txt\");\r\n        //KevinBacon game = new KevinBacon(\"actors.txt\", \"movies.txt\", \"movie-actors.txt\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/KevinBacon.java b/src/KevinBacon.java
--- a/src/KevinBacon.java	(revision 0572f7eb0f7918ef43cc9e5e9763c518194bdec8)
+++ b/src/KevinBacon.java	(date 1676856223707)
@@ -63,13 +63,37 @@
         }
     }
     public void bestCenters(int n) {
-        Map<Double, String> averages = new TreeMap<>();
-        for(String actor: graph.vertices()) {
-            Double avg = GraphLib.averageSeparation(tree, actor);
-            averages.put(avg, actor);
-        }
-        Map<Double, String> sortedAverages = new TreeMap<>(averages);
-        System.out.println(sortedAverages);
+        if(n > tree.numVertices() - GraphLib.missingVertices(graph,  tree).size()+1) {
+            System.out.println("You input a number larger than the amount of actors. Try again.\n");
+            getUserInput();
+        } else {
+            Map<Double, String> averages = new TreeMap<>();
+            for (String actor : tree.vertices()) {
+                Double avg = GraphLib.averageSeparation(tree, actor);
+                averages.put(avg, actor);
+            }
+            Map<Double, String> sortedAverages = new TreeMap<>(averages);
+            List<String> sortedNames = new ArrayList<>();
+            List<Double> sortedSeps = new ArrayList<>();
+            for (Double key : sortedAverages.keySet()) {
+                sortedNames.add(sortedAverages.get(key));
+                sortedSeps.add(key);
+            }
+            if (n > 0) {
+                int i = 0;
+                while (i < n) {
+                    System.out.println(sortedNames.get(i) + " has average separation " + sortedSeps.get(i) + "\n");
+                    i += 1;
+                }
+            } else {
+                int i = sortedNames.toArray().length - 1;
+                for (int j = 0; j < Math.abs(n); j++) {
+                    System.out.println(sortedNames.get(i) + "has average separation " + sortedSeps.get(i) + "\n");
+                    i -= 1;
+                }
+            }
+            getUserInput();
+        }
     }
     public void sortDegree(int low, int high) {
 
@@ -99,11 +123,16 @@
         func = temp[0];
         switch (func) {
             case "c" -> {
-                try {
-                    int n = Integer.parseInt(temp[1]);
-                    bestCenters(n);
-                } catch (NumberFormatException nfe) {
-                    System.out.println("Invalid number. Try again\n");
+                if(temp.length > 1) {
+                    try {
+                        int n = Integer.parseInt(temp[1]);
+                        bestCenters(n);
+                    } catch (NumberFormatException nfe) {
+                        System.out.println("Invalid number. Try again\n");
+                        getUserInput();
+                    }
+                }else {
+                    System.out.println("You must input a number as well. Try again");
                     getUserInput();
                 }
             }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_16\" default=\"true\" project-jdk-name=\"16\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 0572f7eb0f7918ef43cc9e5e9763c518194bdec8)
+++ b/.idea/misc.xml	(date 1676853613109)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_16" default="true" project-jdk-name="16" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="16" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8e798034-9bb3-4c41-9fd4-e40bcb11d78f\" name=\"Changes\" comment=\"added parsing of user input which calls corresponding methods, not all methods are filled in yet\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/KevinBacon.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/KevinBacon.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2LlEukimXwewMGbcDuxtmkJjCs7\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/16037/School/23W/CS10/KevinBaconGame&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/src\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8e798034-9bb3-4c41-9fd4-e40bcb11d78f\" name=\"Changes\" comment=\"\" />\r\n      <created>1676437495930</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1676437495930</updated>\r\n      <workItem from=\"1676437498080\" duration=\"1154000\" />\r\n      <workItem from=\"1676685471468\" duration=\"122000\" />\r\n      <workItem from=\"1676685598585\" duration=\"17000\" />\r\n      <workItem from=\"1676685620738\" duration=\"33000\" />\r\n      <workItem from=\"1676685675949\" duration=\"7000\" />\r\n      <workItem from=\"1676685751283\" duration=\"8542000\" />\r\n      <workItem from=\"1676762653480\" duration=\"59000\" />\r\n      <workItem from=\"1676762718551\" duration=\"697000\" />\r\n      <workItem from=\"1676763430831\" duration=\"1697000\" />\r\n      <workItem from=\"1676839643384\" duration=\"4398000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"provided files\">\r\n      <created>1676437931276</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676437931276</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Copied graphLib from SA5 - need AdjacencyMapGraph to stay put as DS. Filled the four methods for GraphLib.\">\r\n      <created>1676782934599</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676782934599</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"start KB\">\r\n      <created>1676841118352</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676841118352</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"p find path command in bacon game\">\r\n      <created>1676843442361</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676843442361</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"added parsing of user input which calls corresponding methods, not all methods are filled in yet\">\r\n      <created>1676847834411</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676847834411</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"provided files\" />\r\n    <MESSAGE value=\"Copied graphLib from SA5 - need AdjacencyMapGraph to stay put as DS. Filled the four methods for GraphLib.\" />\r\n    <MESSAGE value=\"start KB\" />\r\n    <MESSAGE value=\"p find path command in bacon game\" />\r\n    <MESSAGE value=\"added parsing of user input which calls corresponding methods, not all methods are filled in yet\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added parsing of user input which calls corresponding methods, not all methods are filled in yet\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0572f7eb0f7918ef43cc9e5e9763c518194bdec8)
+++ b/.idea/workspace.xml	(date 1676854669048)
@@ -7,6 +7,7 @@
     <list default="true" id="8e798034-9bb3-4c41-9fd4-e40bcb11d78f" name="Changes" comment="added parsing of user input which calls corresponding methods, not all methods are filled in yet">
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/GraphLib.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GraphLib.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/KevinBacon.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/KevinBacon.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
